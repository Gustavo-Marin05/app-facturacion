// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  fullName String
  ci       String    @unique
  password String
  role     Role      @default(USER)
  invoices Invoice[]

  //Relación entre ADMIN y USERS
  idAdmin    Int? // ID del ADMIN que lo creó
  admin      User?      @relation("AdminToUsers", fields: [idAdmin], references: [id])
  users      User[]     @relation("AdminToUsers")
  categories Category[]
  products   Product[]
  customer   Customer[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Customer {
  id       Int       @id @default(autoincrement())
  ci       String?   @unique
  fullName String?   @default("Anónimus client")
  invoices Invoice[]
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // Relación con productos

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  price      Float
  stock      Int
  // Añadir relación con categoría
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  //relacion con el usuario quien lo creo

  user   User @relation(fields: [userId], references: [id])
  userId Int

  details InvoiceDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id         Int             @id @default(autoincrement())
  date       DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer        @relation(fields: [customerId], references: [id])
  customerId Int
  total      Float
  details    InvoiceDetail[]

  status InvoiceStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model InvoiceDetail {
  id        Int     @id @default(autoincrement())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  subtotal  Float
}
